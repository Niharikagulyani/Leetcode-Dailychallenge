int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
    vector<int> dirs = {1,0,-1,0,1,-1,-1,1,1,1};
    int n=grid.size();
    if(grid[0][0]!=0 || grid[n-1][n-1]!=0) return -1; 
    if(grid[0][0]==0 && n==1) return 1;
    int distance=0;
    queue<pair<int,int>> q;
    q.push({0,0});
    while(q.size()>0){
        int cnt=q.size();
        distance++;
        while(cnt-- >0){
            pair<int,int> p=q.front();
            q.pop();
            int x= p.first;
            int y=p.second;  
            for(int i=0;i<8;i++){
                int x0 = x+dirs[i];
                int y0 = y+dirs[i+1];
                if(x0<0 ||x0>=n || y0<0 || y0>=n || grid[x0][y0]==1)
                  continue;
                if(x0==n-1 && y0==n-1)
                  return distance+1;
                grid[x0][y0]=1;
                q.push({x0,y0});
            }  
        }
    }
    return -1;
    }
